<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.green.greenstock.repository.interfaces.ChattingRepository"> 

	<insert id="subscribe">
		insert into subscribe(user_id, companyCode)
		values (#{userId}, #{companyCode})
	</insert>
	<delete id="unSubscribe">
		delete from subscribe
		where user_id = #{userId}
		and companyCode = #{companyCode}
	</delete>

	<select id="subCheck" resultType="String">
		select user_id
			from subscribe
			where companyCode = #{companyCode}
			and user_id = #{userId}
		union all
			select 0 as coin
			from dual
		limit 1
	</select>
	
	<insert id="insertMessage" parameterType="com.green.greenstock.dto.ChatMessage">
		insert into message ( user_id, companyCode, content, date)
		values ( #{userId}, #{companyCode}, #{content}, #{date} )
	</insert>
	
	<select id="selectMessageList" resultType="com.green.greenstock.dto.ChatMessage">
		select message_id id, user_id, companyCode, content, date, user_name 
		from message
		join user_tb on message.user_id = user_tb.id
		where companyCode = #{companyCode}
		<if test="roleTypeId == 1">
		and date > coalesce(
			(select date from subscribe
			where companyCode = #{companyCode}
			and user_id = #{userId}),
            (select subscribe_time
            from subscribe_to_advisor
            where advisor_id = (select substring(#{companyCode},1,locate('@', #{companyCode})-1) from dual)
            and user_id = #{userId})
            )
		</if>
		order by id desc
		limit 20
	</select>
	
	<insert id="deleteMessage">
		delete from message
		where message_id = ${id}
	</insert>
	
	<select id="selectUserListByCode">
		select user_name 
		from subscribe 
		join user_tb on subscribe.user_id = user_tb.id 
		where companyCode = #{companyCode}
		
	</select>
	
	<select id="selectChatListNotPaging" resultType="com.green.greenstock.dto.ChattingRoom">
		select companyCode, coalesce((select companyName from domestic_stock_code where companyCode = s.companyCode), companyCode) companyName,
			  (select count(user_id) from subscribe where subscribe.companyCode = s.companyCode) countUser,
	    coalesce((select max(date) from message where companyCode = s.companyCode),'1999-09-09') last_message,
        last_time
		from subscribe s
		where user_id = #{id}
		group by companyCode, companyName, last_time
	</select>

	<select id="selectChatListAll" parameterType="com.green.greenstock.dto.PagingDto" resultType="com.green.greenstock.dto.ChattingRoom">
		select distinct v.companyCode, v.companyName,
		(select count(user_id) from subscribe where subscribe.companyCode = s.companyCode) countUser
		from subscribe s
		join domestic_stock_code v on s.companyCode = v.companyCode
		<if test='searchWord!=null'>
			where companyName like concat('%',#{searchWord},'%')
		</if>
		group by companyCode, companyName, last_time
		limit #{offset}, #{recordSize}
	</select>
	
	<select id="countChatList" parameterType="com.green.greenstock.dto.PagingDto">
		select count(distinct s.companyCode)
		from subscribe s
		join domestic_stock_code v on s.companyCode = v.companyCode
        <if test='searchWord != null'>
			where companyName like concat('%', #{searchWord}, '%')
        </if>
	</select>
	
	<select id="advisorChatList" resultType="com.green.greenstock.dto.ChattingRoom">
		select concat(s.advisor_id,'@',s.user_id) companyCode, advisor_nick_name companyName, s.user_id from subscribe_to_advisor s
		join advisor a on a.advisor_id = s.advisor_id
		where s.user_id = #{userId}
	</select>
	
	<select id="advisorIdToUserId" resultType="int">
		select user_id from advisor where advisor_id = #{advisorId}
	</select>
	
	<select id="myAdvisorChatList" resultType="com.green.greenstock.dto.ChattingRoom">
		select concat(s.advisor_id,'@',s.user_id) companyCode, 
	   		   concat(advisor_nick_name ,'@',u.user_name) companyName
	  	from subscribe_to_advisor s 
		join advisor a on a.advisor_id = s.advisor_id
		join user_tb u on s.user_id = u.id
		where s.advisor_id = ${userId}
	</select>
	 
	<update id="lastTimeUpdate">
		update subscribe set last_time = now() 
		where companyCode = #{companyCode} and user_id = #{userId}
	</update>
</mapper>